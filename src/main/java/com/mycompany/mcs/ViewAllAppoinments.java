/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mcs;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.accessibility.Accessible;
import java.awt.event.ActionListener;
import java.util.EventListener;
import java.awt.event.FocusListener;
import java.awt.image.ImageObserver;
import java.awt.event.KeyListener;
import java.awt.MenuContainer;
import java.io.Serializable;



/**
 *
 * @author Mohomed Faizal Aadil
 */
public class ViewAllAppoinments extends javax.swing.JFrame {

    /**
     * Creates new form ViewAllAppoinments
     */

    public ViewAllAppoinments() {
        setResizable(false);
        initComponents();
       // show_app();
        tblAppointments.setAutoCreateRowSorter(true);
        show_doctor();
        tblDoctors.setAutoCreateRowSorter(true);
        
         java.util.Date date=java.sql.Date.valueOf(java.time.LocalDate.now());
        date_chooser.setMinSelectableDate(date);
     
    }

    public ArrayList<Doctors> doctorList(){
        ArrayList<Doctors> doctorList = new ArrayList<>();
        try{
                    Connection con = ChannellingDB.myConnection();                  
                    String sql = "SELECT * FROM doctordetails";
                    PreparedStatement pst = con.prepareStatement(sql);

                 ResultSet rs = pst.executeQuery();
                 Doctors doctor;

                 while(rs.next()){
                     doctor =new Doctors(rs.getInt("dID"),rs.getString("dName"),rs.getString("dSpeciality"));
                    doctorList.add(doctor);   
                 
                 }
        }catch(Exception e){
            System.out.println(e);
        }
        return doctorList;
    }
    
    public void show_doctor(){
            ArrayList<Doctors> list = doctorList();
            DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
            Object[] row = new Object [3];
            for(int i=0;i<list.size();i++){
                //row[0]=list.get(i).getdID();
                row[0]=list.get(i).getdName();
                row[1]=list.get(i).getdSpeciality();
                model.addRow(row);
            }
    }
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPFname = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPAge = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        updateBTN = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtPLname = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbTitle = new javax.swing.JComboBox<>();
        btnRemoveAppointment = new javax.swing.JButton();
        date_chooser = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        txtAno = new javax.swing.JTextField();
        txtAID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctors = new javax.swing.JTable();
        txtDName = new javax.swing.JTextField();
        txtCNo = new javax.swing.JFormattedTextField();
        cmbTime = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(223, 246, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1070, 100));

        jLabel1.setIcon(new javax.swing.ImageIcon("E:\\ICBT FI\\Sem 4\\FINAL PRO\\Now\\Final Project codes\\MCS\\Images\\icons8-appointment-64.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Orator Std", 0, 36)); // NOI18N
        jLabel2.setText("All Appointments");

        jLabel3.setIcon(new javax.swing.ImageIcon("E:\\ICBT FI\\Sem 4\\FINAL PRO\\Now\\Final Project codes\\MCS\\Images\\icons8-search-40.png")); // NOI18N

        txtSearch.setBackground(new java.awt.Color(223, 246, 255));
        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addComponent(jLabel2))
                    .addComponent(jLabel1))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel2.setBackground(new java.awt.Color(59, 172, 182));

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Appointment No", "Appointment Date", "Appointment Time", "Patient Title", "Patient First Name", "Patient Last Name", "Patient Contact No", "Patient Age", "Doctor Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointments.getTableHeader().setReorderingAllowed(false);
        tblAppointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentsMouseClicked(evt);
            }
        });
        tblAppointments.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblAppointmentsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointments);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel4.setText("Appointment ID");

        jLabel5.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel5.setText("Appointment Date");

        jLabel6.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel6.setText("Appointment Time");

        jLabel8.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel8.setText("Patient First Name");

        txtPFname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPFnameFocusLost(evt);
            }
        });
        txtPFname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPFnameMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel9.setText("Patient Contact No");

        jLabel7.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel7.setText("Patient Age");

        txtPAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPAgeKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel10.setText("Doctor Name");

        deleteBTN.setText("Cancel Appointment");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        updateBTN.setText("Update Appointment");
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel11.setText("Patient Last Name");

        txtPLname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPLnameFocusLost(evt);
            }
        });
        txtPLname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPLnameMouseClicked(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel12.setText("Patient Title");

        cmbTitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr.", "Ms." }));

        btnRemoveAppointment.setText("Remove All Appointments");
        btnRemoveAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAppointmentActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 18)); // NOI18N
        jLabel14.setText("Appointment No");

        txtAID.setEnabled(false);

        tblDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Doctor Speciality"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctors.getTableHeader().setReorderingAllowed(false);
        tblDoctors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDoctors);

        txtDName.setEnabled(false);

        try {
            txtCNo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("+947########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "07:00 A.M", "07:15 A.M", "07:30 A.M", "07:45 A.M", "08:00 A.M", "08:15 A.M", "08:30 A.M", "08:45 A.M", "09:00 A.M", "09:15 A.M", "09:30 A.M", "09:45 A.M", "10:00 A.M", "10:15 A.M", "10:30 A.M", "10:45 A.M", "11:00 A.M", "11:15 A.M", "11:30 A.M", "11:45 A.M", "01:00 P.M", "01:15 P.M", "01:30 P.M", "01:45 P.M", "02:00 P.M", "02:15 P.M", "02:30 P.M", "02:45 P.M", "03:00 P.M", "03:15 P.M", "03:30 P.M", "03:45 P.M", "04:00 P.M", "04:15 P.M", "04:30 P.M", "04:45 P.M", "05:00 P.M", "05:15 P.M", "05:30 P.M", "05:45 P.M", "06:00 P.M", "06:15 P.M", "06:30 P.M", "06:45 P.M", " ", " ", " " }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(34, 968, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(4, 4, 4)
                                .addComponent(cmbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(21, 21, 21)
                                .addComponent(txtPFname, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPLname, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCNo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7))
                                .addGap(62, 62, 62)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPAge, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDName, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtAID, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteBTN)
                                .addGap(41, 41, 41)
                                .addComponent(updateBTN)
                                .addGap(33, 33, 33)
                                .addComponent(btnRemoveAppointment))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel14)
                                .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtAID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel12)
                                    .addComponent(cmbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(txtPLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(txtCNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtPAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtDName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateBTN)
                            .addComponent(deleteBTN)
                            .addComponent(btnRemoveAppointment))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(btnBack)
                .addGap(152, 152, 152))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1070, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

        
        
    
    
    
    
    
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to leave the page?", "VIEW APPOINTMENT",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION){
                Receptionist back = new Receptionist();
                back.show();
                dispose();
            }
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void tblAppointmentsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblAppointmentsKeyReleased

    }//GEN-LAST:event_tblAppointmentsKeyReleased

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String search = txtSearch.getText();
        DefaultTableModel dtm = (DefaultTableModel) tblAppointments.getModel();
        
        try {
            Statement s = ChannellingDB.myConnection().createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex,"DATABASE ERROR!",JOptionPane.ERROR_MESSAGE);
        }
        
        int r = tblAppointments.getRowCount();
        while(r-- > 0){
            dtm.removeRow(r);
        }
        try{
            ResultSet rs;
            rs = getAppointmentDet.getData(search);
            
            while(rs.next()){
                String ptitle = rs.getString("pTitle");
                String pFname = rs.getString("pFname");
                 String pLname = rs.getString("pLname");
                 String pcontactno = rs.getString("pContactno");
                 String page = rs.getString("pAge");
                 String dname = rs.getString("dName");
                 
                Base64.Decoder decoder;
                decoder = Base64.getDecoder();
                    byte[] Ptitle = decoder.decode(ptitle);
                    String dPtitle = new String(Ptitle);
                    
                    byte[] PFname = decoder.decode(pFname);
                    String dPFname = new String(PFname);
                    
                      byte[] PLname = decoder.decode(pLname);
                    String dPLname = new String(PLname);
                    
                    byte[] Page = decoder.decode(page);
                    String dPage = new String(Page);
                    
                
        
                java.util.Vector v = new java.util.Vector();
                
                v.add(rs.getString("AppointmentID"));
                v.add(rs.getString("AppointmentNo"));
                v.add(rs.getString("AppointmentDate"));
                v.add(rs.getString("AppointmentTime"));
                v.add(dPtitle);
                v.add(dPFname);
                v.add(dPLname);
                v.add(pcontactno);
                 v.add(dPage);
                  v.add(dname);
                
                dtm.addRow(v);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex,"ERROR!",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_txtSearchKeyReleased

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
     String title=cmbTitle.getSelectedItem().toString();
       String Fname=txtPFname.getText();
        String Lname=txtPLname.getText();
       String Cno=txtCNo.getText();
        String age=txtPAge.getText();
        String AppID=txtAID.getText();
        String Appno=txtAno.getText();
        String doctor = txtDName.getText();
        
        
        
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to DELETE this record?", "RECORD OPERATION",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        
        if(response==JOptionPane.YES_OPTION){ 
        
            try{
                String sql = "DELETE FROM appointment WHERE AppointmentID=?";
                Connection con = ChannellingDB.myConnection();
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1,AppID);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Appointment No:"+Appno+" has been Cancelled!");
                 try {
                      sendSMS api = new sendSMS();
            api.sms("mcs2k22","2022MCS@2k22",Cno,"Good Day "+title+""+Fname+" "+Lname+"! We regret to inform you that, your Appointment with Dr."+doctor+" has been CANCELLED.");         
                } catch (Exception ex) {
            System.out.println(ex);
        }
                
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTNActionPerformed
       String title=cmbTitle.getSelectedItem().toString();
       String Fname=txtPFname.getText();
       String Lname=txtPLname.getText();
       String Cno=txtCNo.getText();
       String age=txtPAge.getText();
       String time = cmbTime.getSelectedItem().toString();       
       String doctor = txtDName.getText();
       String appNo = txtAno.getText();
         
       Base64.Encoder encoder = Base64.getEncoder();      
       
       String ptitle = encoder.encodeToString(title.getBytes());       
        String etitle = new String(ptitle);
       
       String pfname = encoder.encodeToString(Fname.getBytes());       
        String eFname = new String(pfname);
       
        String plname = encoder.encodeToString(Lname.getBytes());       
        String eLname = new String(plname);
                      
       String page = encoder.encodeToString(age.getBytes());
        String epage = new String(page);        
      
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    String date = sdf.format(date_chooser.getDate());
    //date_chooser.getDayChooser();
        
        
    int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to UPDATE this record?", "RECORD OPERATION",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        
        if(response==JOptionPane.YES_OPTION){    
            try{
                String sql = "UPDATE appointment SET AppointmentDate=?,AppointmentTime=?,pTitle=?,pFname=?,pLname=?,pContactno=?,pAge=?,dName=?, AppointmentNo=? WHERE AppointmentID=?";
                Connection con =ChannellingDB.myConnection();
                PreparedStatement pst = con.prepareStatement(sql);
               
                pst.setString(1,date);
                pst.setString(2,time);
                pst.setString(3,etitle);
                pst.setString(4,eFname);
                pst.setString(5,eLname);
                pst.setString(6,Cno);          
                pst.setString(7,epage);
                pst.setString(8,txtDName.getText());
                 pst.setString(9,txtAno.getText());
                  pst.setString(10,txtAID.getText());
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, " Updated Appointment Details have been sent to Patient! Details saved in Database!");
            
                sendSMS api = new sendSMS();
                    try {
                        api.sms("mcs2k22","2022MCS@2k22",Cno,"Welcome to MCS!Good Day "+title+""+Fname+" "+Lname+"! Your Appointment with Dr."+doctor+" has been CHANGED. Appointment scheduled at "+time+" on "+date+". Your Appointment No is: "+appNo+". Thank You!");
                    } catch (Exception ex) {
                      System.out.println(ex);
                }
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_updateBTNActionPerformed

    private void btnRemoveAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAppointmentActionPerformed
      int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to DELETE this record?", "RECORD OPERATION",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        
        if(response==JOptionPane.YES_OPTION){ 
            try{
                String sql = "DELETE FROM appointment";
                Connection con = ChannellingDB.myConnection();
                PreparedStatement pst = con.prepareStatement(sql);                
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "All Appointments have been removed!");
            }catch(Exception e){
                System.out.println(e);
            }
            
        }
    }//GEN-LAST:event_btnRemoveAppointmentActionPerformed

    private void tblAppointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentsMouseClicked
        int i=tblAppointments.getSelectedRow();
        TableModel model=tblAppointments.getModel();
         txtAID.setText(model.getValueAt(i,0).toString());
         txtAno.setText(model.getValueAt(i,1).toString());
         
         String Time = model.getValueAt(i,3).toString();
        switch (Time){
            case "07:00 A.M":
            cmbTime.setSelectedIndex(0);
            break;
            case "07:15 A.M":
            cmbTime.setSelectedIndex(1);
            break;
            case "07:30 A.M":
            cmbTime.setSelectedIndex(2);
            break;
            case "07:45 A.M":
            cmbTime.setSelectedIndex(3);
            break;
            case "08:00 A.M":
            cmbTime.setSelectedIndex(4);
            break;
            case "08:15 A.M":
            cmbTime.setSelectedIndex(5);
            break;
            case "08:30 A.M":
            cmbTime.setSelectedIndex(6);
            break;
            case "08:45 A.M":
            cmbTime.setSelectedIndex(7);
            break;
            case "09:00 A.M":
            cmbTime.setSelectedIndex(8);
            break;
            case "09:15 A.M":
            cmbTime.setSelectedIndex(9);
            break;
            case "09:30 A.M":
            cmbTime.setSelectedIndex(10);
            break;
            case "09:45 A.M":
            cmbTime.setSelectedIndex(11);
            break;
            case "10:00 A.M":
            cmbTime.setSelectedIndex(12);
            break;
            case "10:15 A.M":
            cmbTime.setSelectedIndex(13);
            break;
            case "10:30 A.M":
            cmbTime.setSelectedIndex(14);
            break;
            case "10:45 A.M":
            cmbTime.setSelectedIndex(15);
            break;
            case "11:00 A.M":
            cmbTime.setSelectedIndex(16);
            break;
            case "11:15 A.M":
            cmbTime.setSelectedIndex(17);
            break;
            case "11:30 A.M":
            cmbTime.setSelectedIndex(18);
            break;
            case "11:45 A.M":
            cmbTime.setSelectedIndex(19);
            break;
            case "01:00 P.M":
            cmbTime.setSelectedIndex(20);
            break;
            case "01:15 P.M":
            cmbTime.setSelectedIndex(21);
            break;
            case "01:30 P.M":
            cmbTime.setSelectedIndex(22);
            break;
            case "01:45 P.M":
            cmbTime.setSelectedIndex(23);
            break;
            case "02:00 P.M":
            cmbTime.setSelectedIndex(24);
            break;
            case "02:15 P.M":
            cmbTime.setSelectedIndex(25);
            break;
            case "02:30 P.M":
            cmbTime.setSelectedIndex(26);
            break;
            case "02:45 P.M":
            cmbTime.setSelectedIndex(27);
            break;
            case "03:00 P.M":
            cmbTime.setSelectedIndex(28);
            break;
            case "03:15 P.M":
            cmbTime.setSelectedIndex(29);
            break;
            case "03:30 P.M":
            cmbTime.setSelectedIndex(30);
            break;
            case "03:45 P.M":
            cmbTime.setSelectedIndex(30);
            break;
            case "04:00 P.M":
            cmbTime.setSelectedIndex(31);
            break;
            case "04:15 P.M":
            cmbTime.setSelectedIndex(32);
            break;
            case "04:30 P.M":
            cmbTime.setSelectedIndex(33);
            break;
            case "04:45 P.M":
            cmbTime.setSelectedIndex(34);
            break;
            case "05:00 P.M":
            cmbTime.setSelectedIndex(35);
            break;
            case "05:15 P.M":
            cmbTime.setSelectedIndex(36);
            break;
            case "05:30 P.M":
            cmbTime.setSelectedIndex(37);
            break;
            case "05:45 P.M":
            cmbTime.setSelectedIndex(38);
            break;
             case "06:00 P.M":
            cmbTime.setSelectedIndex(39);
            break;
            case "06:15 P.M":
            cmbTime.setSelectedIndex(40);
            break;
            case "06:30 P.M":
            cmbTime.setSelectedIndex(41);
            break;
            case "06:45 P.M":
            cmbTime.setSelectedIndex(42);
            break;
        }
         
        String Title = model.getValueAt(i,4).toString();
        switch (Title){
            case "Mr.":
            cmbTitle.setSelectedIndex(0);
            break;
            case "Ms.":
            cmbTitle.setSelectedIndex(1);
            break;
        }
        
       txtPFname.setText(model.getValueAt(i,5).toString());
        txtPLname.setText(model.getValueAt(i,6).toString());
       txtCNo.setText(model.getValueAt(i,7).toString());
       txtPAge.setText(model.getValueAt(i,8).toString());      
       txtDName.setText(model.getValueAt(i,9).toString());
       
       try{
           
           Date date = new SimpleDateFormat("dd-MM-yyyy").parse((String)model.getValueAt(i,2));
           date_chooser.setDate(date);
           
           
       }catch(Exception e){
           
       }
        
        
        
    }//GEN-LAST:event_tblAppointmentsMouseClicked

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
   
                    
                
        
    }//GEN-LAST:event_txtSearchMouseClicked

    private void tblDoctorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorsMouseClicked
        int i=tblDoctors.getSelectedRow();
        TableModel model=tblDoctors.getModel();

        txtDName.setText(model.getValueAt(i,0).toString());
    }//GEN-LAST:event_tblDoctorsMouseClicked

    private void txtPAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPAgeKeyPressed
        if(txtPAge.getText().length()>=2)
    {
        txtPAge.setText(txtPAge.getText().substring(0, 1));
    }
    }//GEN-LAST:event_txtPAgeKeyPressed

    private void txtPFnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPFnameFocusLost
        int lowerCount = 0 ;
                             
        int digitCount = 0 ;
        int charCount = 0 ;
        //txtFirstName.setForeground(Color.black);
        String name = txtPFname.getText();  
        
        if(name.equals("")){
            JOptionPane.showMessageDialog(this,"This textbox cannot be Empty!!");
            
        }else{
          
        String output = name.substring(0,1).toUpperCase() + name.substring(1);
        
        int inputLen = name.length();
         
          for ( int i = 0 ; i < inputLen ; i ++ ) {
                char ch = name.charAt(i);
            if ( Character.isLowerCase ( ch ) ){
                lowerCount ++ ;
            }else if ( Character.isDigit ( ch ) ){
                digitCount ++ ;
            }else if (Character.isSpaceChar(ch)){
                charCount ++ ;
            }
        }
        if(lowerCount >= 2 && digitCount == 0 && charCount == 0){
             txtPFname.setText(output);
             
        }else{
             
            if ( lowerCount < 2 ){
                //low = "Lowercase letters";
                JOptionPane.showMessageDialog(this, "Enter atleast 2 lowercase letters");
            } if ( digitCount > 0 ){
                //digit = "Numbers";
                JOptionPane.showMessageDialog(this, "Digits or Numbers aren't allowed");
            } if (charCount > 0){
                JOptionPane.showMessageDialog(this, "Spaces are not allowed");
            }
            //JOptionPane.showMessageDialog(this, "The password did not have enough of the following: "+up+" "+low+" "+digit+"");
        }
        }
    }//GEN-LAST:event_txtPFnameFocusLost

    private void txtPFnameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPFnameMouseClicked
        txtPFname.setText(null);
    }//GEN-LAST:event_txtPFnameMouseClicked

    private void txtPLnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPLnameFocusLost
        int lowerCount = 0 ;
                             
        int digitCount = 0 ;
        int charCount = 0 ;
        //txtFirstName.setForeground(Color.black);
        String name = txtPLname.getText();  
        
        if(name.equals("")){
            JOptionPane.showMessageDialog(this,"This textbox cannot be Empty!!");
            
        }else{
          
        String output = name.substring(0,1).toUpperCase() + name.substring(1);
        
        int inputLen = name.length();
         
          for ( int i = 0 ; i < inputLen ; i ++ ) {
                char ch = name.charAt(i);
            if ( Character.isLowerCase ( ch ) ){
                lowerCount ++ ;
            }else if ( Character.isDigit ( ch ) ){
                digitCount ++ ;
            }else if (Character.isSpaceChar(ch)){
                charCount ++ ;
            }
        }
        if(lowerCount >= 2 && digitCount == 0 && charCount == 0){
             txtPLname.setText(output);
             
        }else{
             
            if ( lowerCount < 2 ){
                //low = "Lowercase letters";
                JOptionPane.showMessageDialog(this, "Enter atleast 2 lowercase letters");
            } if ( digitCount > 0 ){
                //digit = "Numbers";
                JOptionPane.showMessageDialog(this, "Digits or Numbers aren't allowed");
            } if (charCount > 0){
                JOptionPane.showMessageDialog(this, "Spaces are not allowed");
            }
            //JOptionPane.showMessageDialog(this, "The password did not have enough of the following: "+up+" "+low+" "+digit+"");
        }
        }
    }//GEN-LAST:event_txtPLnameFocusLost

    private void txtPLnameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPLnameMouseClicked
        txtPLname.setText(null);
    }//GEN-LAST:event_txtPLnameMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppoinments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppoinments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppoinments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppoinments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAllAppoinments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemoveAppointment;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JComboBox<String> cmbTitle;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTable tblDoctors;
    private javax.swing.JTextField txtAID;
    private javax.swing.JTextField txtAno;
    private javax.swing.JFormattedTextField txtCNo;
    private javax.swing.JTextField txtDName;
    private javax.swing.JTextField txtPAge;
    private javax.swing.JTextField txtPFname;
    private javax.swing.JTextField txtPLname;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JButton updateBTN;
    // End of variables declaration//GEN-END:variables
}
